<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- OPML generated by OPML Editor v10.1b19 on Sun, 24 Jul 2022 21:11:09 GMT -->
<opml version="2.0">
	<head>
		<title>nodeEditor: outlineBrowser</title>
		<dateCreated>Thu, 02 Sep 2021 13:25:43 GMT</dateCreated>
		<dateModified>Sun, 24 Jul 2022 21:11:09 GMT</dateModified>
		<ownerName>Dave Winer</ownerName>
		<ownerId>http://davewiner.com/</ownerId>
		<expansionState>1, 3, 10, 47, 64</expansionState>
		<vertScrollState>18</vertScrollState>
		<windowTop>237</windowTop>
		<windowLeft>989</windowLeft>
		<windowBottom>1170</windowBottom>
		<windowRight>2086</windowRight>
		</head>
	<body>
		<outline text="/scripting.com/code/outlinebrowser/">
			<outline text="worknotes.md" created="Thu, 02 Sep 2021 13:27:17 GMT">
				<outline text="# Worknotes" created="Sun, 24 Jul 2022 15:14:10 GMT"/>
				<outline text="#### 7/24/22 by DW -- v0.6.1" created="Sun, 24 Jul 2022 13:53:19 GMT">
					<outline text="Added support for image and inlineImage attributes. These were previously added in Old School, but needed to be added here too." created="Sun, 24 Jul 2022 13:53:25 GMT"/>
					</outline>
				<outline text="#### 5/30/22 by DW" created="Mon, 30 May 2022 15:03:36 GMT">
					<outline text="Fixed display of flCodeSubs sub-outlines. " created="Mon, 30 May 2022 15:03:38 GMT"/>
					</outline>
				<outline text="#### 5/29/22; 12:22:51 PM by DW" created="Sun, 29 May 2022 16:22:51 GMT">
					<outline text="Now using this in pagepark templates. " created="Sun, 29 May 2022 16:22:52 GMT">
						<outline text="Had to fix some problems introduced in the 9/21 transition, look in the pagepark opml template for details." created="Sun, 29 May 2022 16:23:00 GMT"/>
						</outline>
					</outline>
				<outline text="#### 9/2/21; 9:27:22 AM by DW" created="Thu, 02 Sep 2021 13:27:20 GMT">
					<outline text="copied from browsers project" created="Thu, 02 Sep 2021 13:27:23 GMT"/>
					<outline text="outline browsers and river browsers don't belong together" created="Thu, 02 Sep 2021 13:27:35 GMT"/>
					<outline text="first use -- the template for Drummer blogs" created="Thu, 02 Sep 2021 13:27:51 GMT"/>
					</outline>
				<outline text="#### 4/14/18; 11:11:13 AM by DW">
					<outline text="Commented out document.writes at top. If you use the outlinebrowser you have to include these yourself."/>
					<outline text="version 0.5.1."/>
					</outline>
				<outline text="#### 9/22/17; 12:38:27 PM by DW">
					<outline text="Two new routines ">
						<outline text="getExpansionState"/>
						<outline text="applyExpansionState"/>
						</outline>
					<outline text="Callback in outlineBrowserData">
						<outline text="expandCollapseCallback"/>
						</outline>
					<outline text="Version 0.5.0"/>
					</outline>
				<outline text="#### 7/3/17; 2:38:53 PM by DW">
					<outline text="Add emoji support."/>
					</outline>
				</outline>
			<outline text="code.js" created="Thu, 02 Sep 2021 13:26:00 GMT">
				<outline text="var outlineBrowserData = {">
					<outline text="version: &quot;0.6.1&quot;,"/>
					<outline text="serialNum: 0,"/>
					<outline text="flTextBasedPermalinks: true, //1/26/17 by DW"/>
					<outline text="flProcessEmoji: true, //7/3/17 by DW"/>
					<outline text="expandCollapseCallback: function (idnum) { //9/22/17 by DW">
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="function getExpansionState () {">
					<outline text="var theList = &quot;&quot;;"/>
					<outline text="function stringDelete (s, ix, ct) {">
						<outline text="var start = ix - 1;"/>
						<outline text="var end = (ix + ct) - 1;"/>
						<outline text="var s1 = s.substr (0, start);"/>
						<outline text="var s2 = s.substr (end);"/>
						<outline text="return (s1 + s2);"/>
						<outline text="}"/>
						</outline>
					<outline text="$(&quot;.aOutlineWedgeLink i&quot;).each (function () {">
						<outline text="var flExpanded = $(this).hasClass (&quot;fa-caret-down&quot;);"/>
						<outline text="if (flExpanded) {">
							<outline text="var id = $(this).attr (&quot;id&quot;); //something like idOutlineWedge17"/>
							<outline text="theList += stringDelete (id, 1, &quot;idOutlineWedge&quot;.length) + &quot;,&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="if (theList.length &gt; 0) {">
						<outline text="theList = stringDelete (theList, theList.length, 1); //remove trailing comma"/>
						<outline text="}"/>
						</outline>
					<outline text="return (theList);"/>
					<outline text="}"/>
					</outline>
				<outline text="function applyExpansionState (theList) {">
					<outline text="var splits = theList.split (&quot;,&quot;);"/>
					<outline text="for (var i = 0; i &lt; splits.length; i++) {">
						<outline text="var idWedge = &quot;#idOutlineWedge&quot; + splits [i];"/>
						<outline text="var idLevel = &quot;#idOutlineLevel&quot; + splits [i];"/>
						<outline text="$(idWedge).attr (&quot;class&quot;, &quot;fa fa-caret-down&quot;);"/>
						<outline text="$(idWedge).css (&quot;color&quot;, &quot;silver&quot;);"/>
						<outline text="$(idLevel).css (&quot;display&quot;, &quot;block&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function ecOutline (idnum) { " created="Wed, 05 Mar 2014 16:42:21 GMT" pgfnum="38448">
					<outline text="var c = document.getElementById (&quot;idOutlineWedge&quot; + idnum), idUL = &quot;#idOutlineLevel&quot; + idnum;" created="Sun, 22 Dec 2013 00:04:33 GMT" pgfnum="34114"/>
					<outline text="if (c.className == &quot;fa fa-caret-down&quot;) {" created="Sat, 21 Dec 2013 23:21:38 GMT" pgfnum="34101">
						<outline text="c.className = &quot;fa fa-caret-right&quot;;" created="Sun, 22 Dec 2013 00:05:17 GMT" pgfnum="34116"/>
						<outline text="c.style.color = &quot;black&quot;;"/>
						<outline text="$(idUL).slideUp (75);"/>
						<outline text="}" created="Sun, 22 Dec 2013 00:04:58 GMT" pgfnum="34115"/>
						</outline>
					<outline text="else {" created="Sun, 22 Dec 2013 00:05:34 GMT" pgfnum="34117">
						<outline text="c.className = &quot;fa fa-caret-down&quot;;" created="Sun, 22 Dec 2013 00:05:37 GMT" pgfnum="34118"/>
						<outline text="c.style.color = &quot;silver&quot;;"/>
						<outline text="$(idUL).slideDown (75);" isComment="true"/>
						<outline text="$(idUL).slideDown (75, undefined, function () {">
							<outline text=""/>
							<outline text="$(idUL).css (&quot;display&quot;, &quot;block&quot;);"/>
							<outline text=""/>
							<outline text="});"/>
							</outline>
						<outline text="}" created="Sun, 22 Dec 2013 00:05:45 GMT" pgfnum="34119"/>
						</outline>
					<outline text="outlineBrowserData.expandCollapseCallback (idnum); //9/22/17 by DW"/>
					<outline text="}" created="Wed, 05 Mar 2014 16:42:31 GMT" pgfnum="38449"/>
					</outline>
				<outline text="function riverGetPermalinkString (urlPermalink, permalinkString) {">
					<outline text="if (urlPermalink == undefined) {">
						<outline text="return (&quot;&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text="if (permalinkString == undefined) { ">
						<outline text="permalinkString = &quot;#&quot;;"/>
						<outline text="}"/>
						</outline>
					<outline text="return (&quot;&lt;div class=\&quot;divOutlinePermalink\&quot;&gt;&lt;a href=\&quot;&quot; + urlPermalink + &quot;\&quot;&gt;&quot; + permalinkString + &quot;&lt;/a&gt;&lt;/div&gt;&quot;);"/>
					<outline text="}"/>
					</outline>
				<outline text="function renderOutlineBrowser (outline, flMarkdown, urlPermalink, permalinkString, flExpanded) {">
					<outline text="Changes" isComment="true">
						<outline text="9/2/21; 10:15:52 AM by DW" created="Thu, 02 Sep 2021 14:15:51 GMT">
							<outline text="If the top level node has no text, don't include it in the outline. " created="Thu, 02 Sep 2021 14:15:52 GMT"/>
							</outline>
						<outline text="9/2/21; 9:48:35 AM by DW" created="Thu, 02 Sep 2021 13:48:34 GMT">
							<outline text="If flMarkdown is false, don't create a new Markdown object at the beginning." created="Thu, 02 Sep 2021 13:48:35 GMT"/>
							</outline>
						<outline text="6/18/15; 12:57:19 PM by DW">
							<outline text="Changes back from the worldOutline version, since we're running in the browser again.">
								<outline text="1. Use MarkdownConverter instead of marked."/>
								<outline text="2. Do the full getHotText thing."/>
								</outline>
							</outline>
						<outline text="6/15/15; 2:11:27 PM by DW">
							<outline text="Cribbed from riverRenderOutline in the worldOutline code. Eventually I want to make it call this code, and make riverBrowser call it too."/>
							</outline>
						<outline text="5/20/15; 10:40:27 AM by DW">
							<outline text="Add linking from childless nodes."/>
							</outline>
						<outline text="5/19/15; 10:15:55 AM by DW">
							<outline text="Added outlinelevel variable to track the level of the outline, using it to add a class to the &lt;ul&gt; elements that make up the outline."/>
							</outline>
						<outline text="5/7/15; 8:35:53 AM by DW">
							<outline text="Cribbed from riverBrowser.js. Changes noted below.">
								<outline text="We use the marked package to render Markdown text instead of Markdown.Converter."/>
								<outline text="getHotText just returns the text, it does no processing."/>
								</outline>
							</outline>
						<outline text="5/2/15; 10:40:34 AM by DW">
							<outline text="Ignore commented lines."/>
							</outline>
						<outline text="4/28/15; 11:34:03 AM by DW">
							<outline text="Outlines now understand the &quot;img&quot; att, it adds the image to the text, floating in the right edge of the text."/>
							</outline>
						<outline text="10/23/14; 10:02:46 AM by DW">
							<outline text="New optional params, permalinkString, flExpanded."/>
							</outline>
						<outline text="10/22/14; 12:10:27 PM by DW">
							<outline text="New optional param, urlPermalink. If specified, we use that address for the permalink to this outline."/>
							</outline>
						<outline text="10/16/14; 2:17:19 PM by DW">
							<outline text="Add a div around the subs of a non-Markdown outline, divOutlineSubs, so some styles can apply to those outlines, but not the Markdown outlines. Without this, Markdown lists would be rendered without their numbers. "/>
							</outline>
						<outline text="10/15/14; 2:01:59 PM by DW">
							<outline text="New optional param, flMarkdown. "/>
							</outline>
						</outline>
					<outline text="function stringLower (s) {" created="Thu, 30 Jan 2014 02:37:47 GMT" pgfnum="36557">
						<outline text="if (s === undefined) { //1/26/15 by DW">
							<outline text="return (&quot;&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="s = s.toString (); //1/26/15 by DW"/>
						<outline text="return (s.toLowerCase ());" created="Thu, 30 Jan 2014 02:37:52 GMT" pgfnum="36558"/>
						<outline text="}" created="Thu, 30 Jan 2014 02:38:01 GMT" pgfnum="36559"/>
						</outline>
					<outline text="function isAlpha (ch) {" created="Wed, 23 Jan 2013 15:16:34 GMT" pgfnum="17539">
						<outline text="return (((ch &gt;= 'a') &amp;&amp; (ch &lt;= 'z')) || ((ch &gt;= 'A') &amp;&amp; (ch &lt;= 'Z')));" created="Wed, 23 Jan 2013 15:17:06 GMT" pgfnum="17541"/>
						<outline text="}" created="Mon, 20 Jan 2014 04:13:24 GMT" pgfnum="35962"/>
						</outline>
					<outline text="function isNumeric (ch) {" created="Wed, 22 Jan 2014 15:27:48 GMT" pgfnum="36287">
						<outline text="return ((ch &gt;= '0') &amp;&amp; (ch &lt;= '9'));" created="Wed, 22 Jan 2014 15:27:56 GMT" pgfnum="36289"/>
						<outline text="}" created="Wed, 22 Jan 2014 15:27:53 GMT" pgfnum="36288"/>
						</outline>
					<outline text="function stripMarkup (s) { //5/24/14 by DW">
						<outline text="Changes" isComment="true">
							<outline text="6/9/14; 11:33:37 AM by DW">
								<outline text="River4 is crashing when we pass null to stripMarkup. So add some defensive driving."/>
								</outline>
							</outline>
						<outline text="if ((s === undefined) || (s == null) || (s.length == 0)) {">
							<outline text="return (&quot;&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="return (s.replace (/(&lt;([^&gt;]+)&gt;)/ig, &quot;&quot;));"/>
						<outline text="}"/>
						</outline>
					<outline text="function innerCaseName (text) { //8/12/14 by DW" created="Wed, 23 Jan 2013 19:04:20 GMT" pgfnum="17608">
						<outline text="var s = &quot;&quot;, ch, flNextUpper = false;" created="Wed, 23 Jan 2013 19:07:21 GMT" pgfnum="17610"/>
						<outline text="text = stripMarkup (text); " created="Sun, 30 Jun 2013 21:12:17 GMT" pgfnum="27487"/>
						<outline text="for (var i = 0; i &lt; text.length; i++) {" created="Wed, 23 Jan 2013 19:07:25 GMT" pgfnum="17611">
							<outline text="ch = text [i];" created="Wed, 23 Jan 2013 19:11:28 GMT" pgfnum="17618"/>
							<outline text="if (isAlpha (ch) || isNumeric (ch)) { " created="Wed, 23 Jan 2013 19:10:50 GMT" pgfnum="17616">
								<outline text="if (flNextUpper) {" created="Wed, 23 Jan 2013 19:12:50 GMT" pgfnum="17624">
									<outline text="ch = ch.toUpperCase ();" created="Wed, 23 Jan 2013 19:13:12 GMT" pgfnum="17628"/>
									<outline text="flNextUpper = false;" created="Wed, 23 Jan 2013 19:13:10 GMT" pgfnum="17627"/>
									<outline text="}"/>
									</outline>
								<outline text="else {" created="Wed, 23 Jan 2013 19:38:06 GMT" pgfnum="17637">
									<outline text="ch = ch.toLowerCase ();" created="Wed, 23 Jan 2013 19:13:12 GMT" pgfnum="17628"/>
									<outline text="}"/>
									</outline>
								<outline text="s += ch;" created="Wed, 23 Jan 2013 19:08:53 GMT" pgfnum="17613"/>
								<outline text="}"/>
								</outline>
							<outline text="else {" created="Wed, 23 Jan 2013 19:12:04 GMT" pgfnum="17619">
								<outline text="if (ch == ' ') { " created="Wed, 23 Jan 2013 19:12:12 GMT" pgfnum="17621">
									<outline text="flNextUpper = true;" created="Wed, 23 Jan 2013 19:12:25 GMT" pgfnum="17623"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="return (s);" created="Wed, 23 Jan 2013 19:09:53 GMT" pgfnum="17615"/>
						<outline text="}"/>
						</outline>
					<outline text="function filledString (ch, ct) { //6/4/14 by DW">
						<outline text="var s = &quot;&quot;;"/>
						<outline text="for (var i = 0; i &lt; ct; i++) {">
							<outline text="s += ch;"/>
							<outline text="}"/>
							</outline>
						<outline text="return (s);"/>
						<outline text="}"/>
						</outline>
					<outline text="function getBoolean (val) { //12/5/13 by DW" created="Thu, 05 Dec 2013 13:36:54 GMT" pgfnum="33203">
						<outline text="Changes" isComment="true" created="Thu, 05 Dec 2013 13:53:35 GMT" pgfnum="33230">
							<outline text="12/5/13; 8:53:38 AM by DW" created="Thu, 05 Dec 2013 13:53:37 GMT" pgfnum="33231">
								<outline text="Created. Use this to get a boolean value from something that might not be a boolean. " created="Thu, 05 Dec 2013 13:53:39 GMT" pgfnum="33232"/>
								<outline text="For example, &quot;false&quot; should be the boolean value false, but in JavaScript, it's true. " created="Thu, 05 Dec 2013 13:54:18 GMT" pgfnum="33233"/>
								<outline text="So pass it through this routine to be safe. " created="Thu, 05 Dec 2013 13:54:42 GMT" pgfnum="33234"/>
								</outline>
							</outline>
						<outline text="switch (typeof (val)) {" created="Thu, 05 Dec 2013 13:38:37 GMT" pgfnum="33207">
							<outline text="case &quot;string&quot;:" created="Thu, 05 Dec 2013 13:38:50 GMT" pgfnum="33209">
								<outline text="if (val.toLowerCase () == &quot;true&quot;) {" created="Thu, 05 Dec 2013 13:39:59 GMT" pgfnum="33215">
									<outline text="return (true);" created="Thu, 05 Dec 2013 13:40:47 GMT" pgfnum="33219"/>
									<outline text="}" created="Thu, 05 Dec 2013 13:40:32 GMT" pgfnum="33216"/>
									</outline>
								<outline text="break;" created="Thu, 05 Dec 2013 13:40:55 GMT" pgfnum="33220"/>
								</outline>
							<outline text="case &quot;boolean&quot;:" created="Thu, 05 Dec 2013 13:38:57 GMT" pgfnum="33211">
								<outline text="return (val);" created="Thu, 05 Dec 2013 13:41:03 GMT" pgfnum="33221"/>
								</outline>
							<outline text="case &quot;number&quot;:" created="Thu, 05 Dec 2013 13:39:46 GMT" pgfnum="33213">
								<outline text="if (val == 1) {" created="Thu, 05 Dec 2013 13:41:11 GMT" pgfnum="33222">
									<outline text="return (true);" created="Thu, 05 Dec 2013 13:41:16 GMT" pgfnum="33223"/>
									<outline text="}" created="Thu, 05 Dec 2013 13:41:19 GMT" pgfnum="33224"/>
									</outline>
								<outline text="break;" created="Thu, 05 Dec 2013 13:39:50 GMT" pgfnum="33214"/>
								</outline>
							<outline text="}" created="Thu, 05 Dec 2013 13:38:45 GMT" pgfnum="33208"/>
							</outline>
						<outline text="return (false);" created="Thu, 05 Dec 2013 13:41:34 GMT" pgfnum="33225"/>
						<outline text="}" created="Thu, 05 Dec 2013 13:37:02 GMT" pgfnum="33206"/>
						</outline>
					<outline text="function beginsWith (s, possibleBeginning, flUnicase) { " created="Wed, 27 Nov 2013 21:58:15 GMT" pgfnum="32470">
						<outline text="if (s.length == 0) { //1/1/14 by DW" created="Wed, 01 Jan 2014 23:29:44 GMT" pgfnum="35184">
							<outline text="return (false);" created="Wed, 01 Jan 2014 23:29:49 GMT" pgfnum="35185"/>
							<outline text="}" created="Wed, 01 Jan 2014 23:29:52 GMT" pgfnum="35186"/>
							</outline>
						<outline text="if (flUnicase === undefined) {" created="Wed, 27 Nov 2013 21:59:59 GMT" pgfnum="32482">
							<outline text="flUnicase = true;" created="Wed, 27 Nov 2013 22:00:10 GMT" pgfnum="32483"/>
							<outline text="}" created="Wed, 27 Nov 2013 22:00:14 GMT" pgfnum="32484"/>
							</outline>
						<outline text="if (flUnicase) {" created="Wed, 27 Nov 2013 22:00:49 GMT" pgfnum="32485">
							<outline text="for (var i = 0; i &lt; possibleBeginning.length; i++) {" created="Wed, 27 Nov 2013 21:58:48 GMT" pgfnum="32476">
								<outline text="if (stringLower (s [i]) != stringLower (possibleBeginning [i])) {" created="Wed, 27 Nov 2013 21:59:05 GMT" pgfnum="32478">
									<outline text="return (false);" created="Wed, 27 Nov 2013 21:59:34 GMT" pgfnum="32479"/>
									<outline text="}" created="Wed, 27 Nov 2013 21:59:38 GMT" pgfnum="32480"/>
									</outline>
								<outline text="}" created="Wed, 27 Nov 2013 21:59:01 GMT" pgfnum="32477"/>
								</outline>
							<outline text="}" created="Wed, 27 Nov 2013 22:00:58 GMT" pgfnum="32486"/>
							</outline>
						<outline text="else {" created="Wed, 27 Nov 2013 22:01:08 GMT" pgfnum="32487">
							<outline text="for (var i = 0; i &lt; possibleBeginning.length; i++) {" created="Wed, 27 Nov 2013 21:58:48 GMT" pgfnum="32476">
								<outline text="if (s [i] != possibleBeginning [i]) {" created="Wed, 27 Nov 2013 21:59:05 GMT" pgfnum="32478">
									<outline text="return (false);" created="Wed, 27 Nov 2013 21:59:34 GMT" pgfnum="32479"/>
									<outline text="}" created="Wed, 27 Nov 2013 21:59:38 GMT" pgfnum="32480"/>
									</outline>
								<outline text="}" created="Wed, 27 Nov 2013 21:59:01 GMT" pgfnum="32477"/>
								</outline>
							<outline text="}" created="Wed, 27 Nov 2013 22:01:15 GMT" pgfnum="32488"/>
							</outline>
						<outline text="return (true);" created="Wed, 27 Nov 2013 21:59:44 GMT" pgfnum="32481"/>
						<outline text="}" created="Wed, 27 Nov 2013 21:58:43 GMT" pgfnum="32475"/>
						</outline>
					<outline text="function hotUpText (s, url) { //7/18/14 by DW" created="Thu, 13 Mar 2014 15:18:41 GMT" pgfnum="39151">
						<outline text="Changes" isComment="true" created="Thu, 13 Mar 2014 15:41:14 GMT" pgfnum="39177">
							<outline text="7/18/14; 8:36:22 AM by DW">
								<outline text="Cribbed from fargoUtils.js -- it's the kind of code you want accessible everywhere."/>
								</outline>
							<outline text="3/14/14; 5:34:47 PM by DW" created="Fri, 14 Mar 2014 21:34:46 GMT" pgfnum="39299">
								<outline text="Allow url to be undefined, just return s if that's so." created="Fri, 14 Mar 2014 21:34:47 GMT" pgfnum="39300"/>
								</outline>
							<outline text="3/13/14; 11:41:18 AM by DW" created="Thu, 13 Mar 2014 15:41:17 GMT" pgfnum="39178">
								<outline text="If the text contains text within [square brackets], hot-up that text and return it." created="Thu, 13 Mar 2014 15:41:18 GMT" pgfnum="39179"/>
								<outline text="Otherwise, hot-up the whole string and return it." created="Thu, 13 Mar 2014 15:41:50 GMT" pgfnum="39180"/>
								</outline>
							</outline>
						<outline text="" created="Fri, 14 Mar 2014 21:33:53 GMT" pgfnum="39293"/>
						<outline text="if (url === undefined) { //makes it easier to call -- 3/14/14 by DW" created="Fri, 14 Mar 2014 21:33:53 GMT" pgfnum="39294">
							<outline text="return (s);" created="Fri, 14 Mar 2014 21:34:15 GMT" pgfnum="39297"/>
							<outline text="}" created="Fri, 14 Mar 2014 21:34:18 GMT" pgfnum="39298"/>
							</outline>
						<outline text="" created="Fri, 14 Mar 2014 21:33:53 GMT" pgfnum="39296"/>
						<outline text="function linkit (s) {" created="Thu, 13 Mar 2014 15:40:03 GMT" pgfnum="39175">
							<outline text="return (&quot;&lt;a href=\&quot;&quot; + url + &quot;\&quot; target=\&quot;_blank\&quot;&gt;&quot; + s + &quot;&lt;/a&gt;&quot;);" created="Thu, 13 Mar 2014 15:27:00 GMT" pgfnum="39166"/>
							<outline text="}" created="Thu, 13 Mar 2014 15:40:11 GMT" pgfnum="39176"/>
							</outline>
						<outline text="var ixleft = s.indexOf (&quot;[&quot;), ixright = s.indexOf (&quot;]&quot;);" created="Thu, 13 Mar 2014 15:19:24 GMT" pgfnum="39153"/>
						<outline text="if ((ixleft == -1) || (ixright == -1)) {" created="Thu, 13 Mar 2014 15:21:44 GMT" pgfnum="39155">
							<outline text="return (linkit (s));" created="Thu, 13 Mar 2014 15:21:58 GMT" pgfnum="39156"/>
							<outline text="}" created="Thu, 13 Mar 2014 15:22:02 GMT" pgfnum="39157"/>
							</outline>
						<outline text="if (ixright &lt; ixleft) {" created="Thu, 13 Mar 2014 15:22:26 GMT" pgfnum="39158">
							<outline text="return (linkit (s));" created="Thu, 13 Mar 2014 15:21:58 GMT" pgfnum="39156"/>
							<outline text="}" created="Thu, 13 Mar 2014 15:22:39 GMT" pgfnum="39160"/>
							</outline>
						<outline text="" created="Thu, 13 Mar 2014 15:23:06 GMT" pgfnum="39161"/>
						<outline text="var linktext = s.substr (ixleft + 1, ixright - ixleft - 1); //string.mid (s, ixleft, ixright - ixleft + 1);" created="Thu, 13 Mar 2014 15:23:12 GMT" pgfnum="39162"/>
						<outline text="linktext = &quot;&lt;a href=\&quot;&quot; + url + &quot;\&quot; target=\&quot;_blank\&quot;&gt;&quot; + linktext + &quot;&lt;/a&gt;&quot;;" created="Thu, 13 Mar 2014 15:27:00 GMT" pgfnum="39166"/>
						<outline text="" created="Thu, 13 Mar 2014 15:27:35 GMT" pgfnum="39167"/>
						<outline text="var leftpart = s.substr (0, ixleft);" created="Thu, 13 Mar 2014 15:34:51 GMT" pgfnum="39173"/>
						<outline text="var rightpart = s.substr (ixright + 1, s.length);" created="Thu, 13 Mar 2014 15:35:19 GMT" pgfnum="39174"/>
						<outline text="s = leftpart + linktext + rightpart;" created="Thu, 13 Mar 2014 15:27:36 GMT" pgfnum="39168"/>
						<outline text="return (s);" created="Thu, 13 Mar 2014 15:28:24 GMT" pgfnum="39169"/>
						<outline text="}" created="Thu, 13 Mar 2014 15:19:04 GMT" pgfnum="39152"/>
						</outline>
					<outline text="function debugNode (theNode) {">
						<outline text="var attstext = &quot;&quot;;"/>
						<outline text="for (var x in theNode) {">
							<outline text="if ((x != &quot;subs&quot;) &amp;&amp; (x != &quot;parent&quot;) &amp;&amp; (x != &quot;created&quot;)) {">
								<outline text="if (attstext.length &gt; 0) {">
									<outline text="attstext +=  &quot;, &quot;;"/>
									<outline text="}"/>
									</outline>
								<outline text="attstext += x + &quot;=&quot; + theNode [x];"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="return (attstext);"/>
						<outline text="}"/>
						</outline>
					<outline text="function getNodeType (theNode) {">
						<outline text="if (theNode.type == &quot;include&quot;) {">
							<outline text="return (theNode.includetype); //this allows include nodes to have types"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="return (theNode.type);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function getNameAtt (theNode) {">
						<outline text="var nameatt = theNode.name;"/>
						<outline text="if (nameatt === undefined) {">
							<outline text="nameatt = innerCaseName (theNode.text);"/>
							<outline text="}"/>
							</outline>
						<outline text="return (nameatt);"/>
						<outline text="}"/>
						</outline>
					<outline text="function typeIsDoc (theNode) {">
						<outline text="var type = getNodeType (theNode);"/>
						<outline text="return ((type !== undefined) &amp;&amp; (type != &quot;include&quot;) &amp;&amp; (type != &quot;link&quot;) &amp;&amp; (type != &quot;tweet&quot;));" created="Wed, 27 Nov 2013 19:18:41 GMT" pgfnum="32453"/>
						<outline text="}"/>
						</outline>
					<outline text="function getIcon (idnum, flcollapsed) {" created="Wed, 05 Mar 2014 17:39:32 GMT" pgfnum="38453">
						<outline text="var wedgedir, color;"/>
						<outline text="if (flcollapsed) {">
							<outline text="wedgedir = &quot;right&quot;;"/>
							<outline text="color = &quot;black&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="wedgedir = &quot;down&quot;;"/>
							<outline text="color = &quot;silver&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="var clickscript = &quot;onclick=\&quot;ecOutline (&quot; + idnum + &quot;)\&quot; &quot;;" created="Wed, 05 Mar 2014 16:05:43 GMT" pgfnum="38439"/>
						<outline text="var icon = &quot;&lt;span class=\&quot;spOutlineIcon\&quot;&gt;&lt;a class=\&quot;aOutlineWedgeLink\&quot; &quot; + clickscript + &quot;&gt;&lt;i class=\&quot;fa fa-caret-&quot; + wedgedir + &quot;\&quot; style=\&quot;color: &quot; + color + &quot;;\&quot; id=\&quot;idOutlineWedge&quot; + idnum + &quot;\&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&quot;;" created="Sat, 21 Dec 2013 17:55:54 GMT" pgfnum="34072"/>
						<outline text="return (icon);" created="Wed, 05 Mar 2014 17:40:15 GMT" pgfnum="38455"/>
						<outline text="}" created="Wed, 05 Mar 2014 17:39:41 GMT" pgfnum="38454"/>
						</outline>
					<outline text="function expandableTextLink (theText, idLevel) {" created="Sat, 08 Mar 2014 23:26:03 GMT" pgfnum="38697">
						<outline text="return (&quot;&lt;a class=\&quot;aOutlineTextLink\&quot; onclick=\&quot;ecOutline (&quot; + idLevel + &quot;)\&quot;&gt;&quot; + theText + &quot;&lt;/a&gt;&quot;);" created="Fri, 07 Mar 2014 23:39:20 GMT" pgfnum="38616"/>
						<outline text="}" created="Sat, 08 Mar 2014 23:26:16 GMT" pgfnum="38698"/>
						</outline>
					<outline text="var htmltext = &quot;&quot;, indentlevel = 0, permalink = riverGetPermalinkString (urlPermalink, permalinkString), outlinelevel = 0;"/>
					<outline text="var markdown = undefined; //9/2/21 by DW"/>
					<outline text="if (flMarkdown === undefined) {">
						<outline text="flMarkdown = false;"/>
						<outline text="}"/>
						</outline>
					<outline text="if (flMarkdown) {" created="Thu, 02 Sep 2021 13:49:15 GMT">
						<outline text="markdown = new Markdown.Converter ();"/>
						<outline text="}" created="Thu, 02 Sep 2021 13:49:19 GMT"/>
						</outline>
					<outline text="if (flExpanded === undefined) { //10/23/14 by DW">
						<outline text="flExpanded = riverBrowserData.flOutlinesExpandedByDefault; //4/16/15 by DW"/>
						<outline text="}"/>
						</outline>
					<outline text="if (permalinkString == undefined) { //10/23/14 by DW" isComment="true">
						<outline text="permalinkString = &quot;#&quot;;"/>
						<outline text="}"/>
						</outline>
					<outline text="function add (s) {">
						<outline text="htmltext += filledString (&quot;\t&quot;, indentlevel) + s + &quot;\r\n&quot;;"/>
						<outline text="}" created="Tue, 17 Dec 2013 21:02:18 GMT" pgfnum="33817"/>
						</outline>
					<outline text="function getHotText (outline) {" isComment="true">
						<outline text="var origtext = outline.text;"/>
						<outline text="return (expandableTextLink (origtext, outlineBrowserData.serialNum)); //5/7/15 by DW"/>
						<outline text="" isComment="true"/>
						<outline text="var s = hotUpText (outline.text, outline.url);" isComment="true"/>
						<outline text="if (s != origtext) {" isComment="true">
							<outline text="return (s);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {" isComment="true">
							<outline text="if (getBoolean (outline.bold)) { //12/6/14 by DW">
								<outline text="s = &quot;&lt;span class=\&quot;spBoldHead\&quot;&gt;&quot; + s + &quot;&lt;/span&gt;&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text="return (expandableTextLink (s, outlineBrowserData.serialNum));"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function getHotText (outline) {">
						<outline text="var origtext = outline.text;"/>
						<outline text="var s = hotUpText (outline.text, outline.url);"/>
						<outline text="if (s != origtext) {">
							<outline text="return (s);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (getBoolean (outline.bold)) { //12/6/14 by DW">
								<outline text="s = &quot;&lt;span class=\&quot;spBoldHead\&quot;&gt;&quot; + s + &quot;&lt;/span&gt;&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text="return (expandableTextLink (s, outlineBrowserData.serialNum));"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function hasSubs (outline) {">
						<outline text="return (outline.subs != undefined) &amp;&amp; (outline.subs.length &gt; 0);"/>
						<outline text="}"/>
						</outline>
					<outline text="function getImgHtml (outline) { //7/15/15 by DW">
						<outline text="Changes" isComment="true">
							<outline text="5/17/19; 10:15:56 AM by DW">
								<outline text="I guess at one point image were called img, so should we support both, or the one we actually use? I say we support both. "/>
								</outline>
							</outline>
						<outline text="var urlImage = outline.image;"/>
						<outline text="if (urlImage === undefined) {">
							<outline text="urlImage = outline.img;"/>
							<outline text="}"/>
							</outline>
						<outline text="if ((outline.type !== undefined) || (urlImage === undefined)) {">
							<outline text="return (&quot;&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="return (&quot;&lt;img style=\&quot;float: right; margin-left: 24px; margin-top: 14px; margin-right: 14px; margin-bottom: 14px;\&quot; src=\&quot;&quot; + urlImage +&quot;\&quot;&gt;&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function gatherStylesFromOutline (outline) { //11/5/14 by DW">
						<outline text="var atts = new Object (), styles = new Object ();"/>
						<outline text="for (var x in outline) {">
							<outline text="switch (x) {">
								<outline text="case &quot;color&quot;:"/>
								<outline text="case &quot;direction&quot;:"/>
								<outline text="case &quot;font-family&quot;:"/>
								<outline text="case &quot;font-size&quot;:"/>
								<outline text="case &quot;font-weight&quot;:"/>
								<outline text="case &quot;letter-spacing&quot;:"/>
								<outline text="case &quot;line-height&quot;:"/>
								<outline text="case &quot;margin-left&quot;:"/>
								<outline text="case &quot;text-decoration&quot;:"/>
								<outline text="case &quot;text-shadow&quot;:"/>
								<outline text="case &quot;text-transform&quot;:"/>
								<outline text="case &quot;white-space&quot;:"/>
								<outline text="case &quot;word-spacing&quot;:">
									<outline text="styles [x] = outline [x];"/>
									<outline text="break;"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="return (styles);"/>
						<outline text="}"/>
						</outline>
					<outline text="function getStylesString (outline, flcollapsed) { //11/7/14 by DW">
						<outline text="var styles = gatherStylesFromOutline (outline), style = &quot;&quot;;"/>
						<outline text="if (flcollapsed) {">
							<outline text="styles.display = &quot;none&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="for (var x in styles) {">
							<outline text="style += x + &quot;: &quot; + styles [x] + &quot;; &quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="if (style.length &gt; 0) {">
							<outline text="style = &quot; style=\&quot;&quot; + style + &quot;\&quot;&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="return (style);"/>
						<outline text="}"/>
						</outline>
					<outline text="function getSubsMarkdownText (outline) {">
						<outline text="Changes" isComment="true">
							<outline text="4/28/15; 11:29:22 AM by DW">
								<outline text="Factored out the img-generating code so we can use it in outlines."/>
								</outline>
							<outline text="11/8/14; 1:41:03 PM by DW">
								<outline text="I added support for styles on outline levels in Markdown, but putting &lt;div&gt;s in the middle of the text causes Markdown to shut off. If that's what you want, add an flMarkdown att with the value of false."/>
								</outline>
							<outline text="10/21/14; 5:06:52 PM by DW">
								<outline text="Adding one \r wasn't enough. We add two."/>
								</outline>
							</outline>
						<outline text="var s = &quot;&quot;, style = getStylesString (outline, false);"/>
						<outline text="if (style.length &gt; 0) {" isComment="true">
							<outline text="s += &quot;&lt;div &quot; + style + &quot;&gt;&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="for (var i = 0; i &lt; outline.subs.length; i++) {">
							<outline text="var child = outline.subs [i], img = &quot;&quot;, imgatt;"/>
							<outline text="if (!getBoolean (child.isComment)) { //5/2/15 by DW">
								<outline text="s += getImgHtml (child) + child.text + &quot;\r\r&quot;;"/>
								<outline text="if (hasSubs (child)) {">
									<outline text="s += getSubsMarkdownText (child);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="if (style.length &gt; 0) {" isComment="true">
							<outline text="s += &quot;&lt;/div&gt;&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="return (s);"/>
						<outline text="}"/>
						</outline>
					<outline text="function getNodePermalink (theNode) { //6/5/16 by DW">
						<outline text="Changes" isComment="true">
							<outline text="1/26/17; 2:45:15 PM by DW">
								<outline text="If the node has a created att, use it to generate the permalink string, if that feature is enabled. Otherwise use the text-based method. I use this in the trumpstatus.org outline browser."/>
								</outline>
							</outline>
						<outline text="var permalinkstring = &quot;&quot;;"/>
						<outline text="function textPermalink () {">
							<outline text="var theName = &quot;&quot;, splits = stripMarkup (theNode.text).split (&quot; &quot;);"/>
							<outline text="for (var i = 0; i &lt; splits.length; i++) {">
								<outline text="var ch = splits [i] [0];"/>
								<outline text="if (isAlpha (ch)) {">
									<outline text="theName += ch.toLowerCase ();"/>
									<outline text="}"/>
									</outline>
								<outline text="if (theName.length &gt;= 4) {">
									<outline text="break;"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="return (theName);"/>
							<outline text="}"/>
							</outline>
						<outline text="function datePermalink () {">
							<outline text="return (new Date (theNode.created).getTime ().toString ());"/>
							<outline text="}"/>
							</outline>
						<outline text="if (getBoolean (theNode.flPermalink)) {">
							<outline text="var theName = &quot;&quot;, splits = stripMarkup (theNode.text).split (&quot; &quot;);"/>
							<outline text="if (outlineBrowserData.flTextBasedPermalinks) { //1/26/17 by DW">
								<outline text="theName = textPermalink ();"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="if (theNode.created !== undefined) {">
									<outline text="theName = datePermalink ();"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="theName = textPermalink ();"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="permalinkstring = &quot;&lt;a name=\&quot;&quot; + theName + &quot;\&quot;&gt;&lt;/a&gt;&lt;span class=\&quot;spNodePermalink\&quot;&gt;&lt;a href=\&quot;#&quot; + theName + &quot;\&quot;&gt;&quot; + &quot;#&quot; + &quot;&lt;/a&gt;&lt;/span&gt;&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="return (permalinkstring);"/>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text="function getOutlineTextClass (theNode) { //9/20/18 by DW">
						<outline text="var myClass = &quot;divOutlineText&quot;;"/>
						<outline text="if (theNode.flCursor) {">
							<outline text="myClass += &quot; divOutlineCursor&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="return (&quot; class=\&quot;&quot; + myClass + &quot;\&quot;&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text="function getNodeText (theNode) { //7/24/22 by DW" created="Sun, 24 Jul 2022 14:07:52 GMT">
						<outline text="function getInlineImage (theText, urlImage) {">
							<outline text="return (&quot;&lt;div class=\&quot;divInlineImage\&quot;&gt;&lt;center&gt;&lt;img class=\&quot;imgInline\&quot; src=\&quot;&quot; + urlImage + &quot;\&quot;&gt;&lt;/center&gt;&quot; + theText + &quot;&lt;/div&gt;&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="function getImageHtml (theNode) {" created="Fri, 12 Nov 2021 20:01:07 GMT">
							<outline text="var imgHtml = &quot;&quot;;"/>
							<outline text="if (theNode.image !== undefined) {">
								<outline text="imgHtml = &quot;&lt;img class=\&quot;imgRightMargin\&quot; src=\&quot;&quot; + theNode.image + &quot;\&quot; border=\&quot;0\&quot; style=\&quot;float: right; padding-left: 25px; padding-bottom: 10px; padding-top: 10px; padding-right: 15px;\&quot;&gt;&quot;;"/>
								<outline text="if (theNode.imageLink !== undefined) { //5/26/20 by DW">
									<outline text="imgHtml = &quot;&lt;a class=\&quot;anchorRightMargin\&quot; href=\&quot;&quot; + theNode.imageLink + &quot;\&quot;&gt;&quot; + imgHtml + &quot;&lt;/a&gt;&quot;;"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="return (imgHtml);" created="Fri, 12 Nov 2021 20:01:45 GMT"/>
							<outline text="}" created="Fri, 12 Nov 2021 20:01:18 GMT"/>
							</outline>
						<outline text="var theText = theNode.text;" created="Sun, 24 Jul 2022 14:12:13 GMT"/>
						<outline text="if (theNode.inlineimage !== undefined) {" created="Sun, 24 Jul 2022 14:12:13 GMT">
							<outline text="theText = getInlineImage (theText, theNode.inlineimage);" created="Sun, 24 Jul 2022 14:13:30 GMT"/>
							<outline text="}" created="Sun, 24 Jul 2022 14:12:31 GMT"/>
							</outline>
						<outline text="else {" created="Sun, 24 Jul 2022 14:54:58 GMT">
							<outline text="if (theNode.image !== undefined) {" created="Sun, 24 Jul 2022 14:55:07 GMT">
								<outline text="theText = getImageHtml (theNode) + theText;" created="Sun, 24 Jul 2022 14:13:30 GMT"/>
								<outline text="}" created="Sun, 24 Jul 2022 14:55:07 GMT"/>
								</outline>
							<outline text="}" created="Sun, 24 Jul 2022 14:55:00 GMT"/>
							</outline>
						<outline text="return (theText);" created="Sun, 24 Jul 2022 14:08:26 GMT"/>
						<outline text="}" created="Sun, 24 Jul 2022 14:08:02 GMT"/>
						</outline>
					<outline text="" created="Sun, 24 Jul 2022 14:07:53 GMT"/>
					<outline text="function addChildlessSub (theNode, path) { //5/20/15 by DW">
						<outline text="var theText = getNodeText (theNode); //7/24/22 by DW" created="Sun, 24 Jul 2022 14:08:49 GMT"/>
						<outline text="console.log (&quot;addChildlessSub&quot;);" isComment="true" created="Sun, 24 Jul 2022 14:08:12 GMT"/>
						<outline text="if (typeIsDoc (theNode)) {">
							<outline text="add (&quot;&lt;li&gt;&lt;div &quot; + getOutlineTextClass (theNode) + &quot;&gt;&lt;a href=\&quot;&quot; + path + &quot;\&quot;&gt;&quot; + theText + &quot;&lt;/a&gt;&quot; + getNodePermalink (theNode) + &quot;&lt;/div&gt;&lt;/li&gt;&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="var type = getNodeType (theNode);"/>
							<outline text="switch (type) {">
								<outline text="case &quot;link&quot;:">
									<outline text="add (&quot;&lt;li&gt;&lt;div &quot; + getOutlineTextClass (theNode) + &quot;&gt;&lt;a href=\&quot;&quot; + theNode.url + &quot;\&quot;&gt;&quot; + theText + &quot;&lt;/a&gt;&quot; + getNodePermalink (theNode) + &quot;&lt;/div&gt;&lt;/li&gt;&quot;);"/>
									<outline text="break;"/>
									</outline>
								<outline text="default: //7/24/22 by DW">
									<outline text="add (&quot;&lt;li&gt;&lt;div &quot; + getOutlineTextClass (theNode) + &quot;&gt;&quot; + theText + getNodePermalink (theNode) + &quot;&lt;/div&gt;&lt;/li&gt;&quot;);"/>
									<outline text="break;"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function addSubs (outline, flcollapsed, path) {">
						<outline text="Changes" isComment="true">
							<outline text="8/24/18; 11:47:10 AM by DW">
								<outline text="Implement flBulletedSubs."/>
								</outline>
							<outline text="6/23/17; 3:40:51 PM by DW">
								<outline text="If there's a flNumberedSubs att on the parent and it's true, add numbering to the subs. "/>
								</outline>
							<outline text="6/24/15; 12:59:04 PM by DW">
								<outline text="If a child has subs, don't hot-up the text. We were hotting up the text of includes."/>
								</outline>
							<outline text="5/28/15; 10:37:23 AM by DW">
								<outline text="Don't pass through &lt;rule headlines."/>
								</outline>
							<outline text="5/20/15; 10:19:12 AM by DW">
								<outline text="Added path param."/>
								</outline>
							<outline text="12/7/14; 2:06:31 PM by DW">
								<outline text="If there's a collapse att on a child, use it to determine if the child is expanded or collapsed. The default is expanded."/>
								</outline>
							</outline>
						<outline text="if (hasSubs (outline)) {">
							<outline text="var style = getStylesString (outline, flcollapsed), ulAddedClass = &quot;&quot;;"/>
							<outline text="if (getBoolean (outline.flNumberedSubs)) { //6/23/17 by DW">
								<outline text="ulAddedClass = &quot; ulNumberedSubs&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="if (getBoolean (outline.flBulletedSubs)) { //8/24/18 by DW">
									<outline text="ulAddedClass = &quot; ulBulletedSubs&quot;;"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="if (getBoolean (outline.flCodeSubs)) { //4/23/20 by DW">
										<outline text="ulAddedClass = &quot; ulCodeSubs&quot;;"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="add (&quot;&lt;ul class=\&quot;ulOutlineList ulLevel&quot; + outlinelevel + ulAddedClass + &quot;\&quot; id=\&quot;idOutlineLevel&quot; + outlineBrowserData.serialNum++ + &quot;\&quot;&quot; + style + &quot;&gt;&quot;); indentlevel++; outlinelevel++;"/>
							<outline text="for (var i = 0; i &lt; outline.subs.length; i++) {">
								<outline text="var child = outline.subs [i], flchildcollapsed = getBoolean (child.collapse), img = getImgHtml (child);"/>
								<outline text=""/>
								<outline text="if (flchildcollapsed) {">
									<outline text="console.log (&quot;addSubs: child.text == &quot; + child.text + &quot;, flchildcollapsed == &quot; + flchildcollapsed);" isComment="true"/>
									<outline text="}"/>
									</outline>
								<outline text=""/>
								<outline text="if (!beginsWith (child.text, &quot;&lt;rule&quot;)) { //5/28/15 by DW">
									<outline text="if (!getBoolean (child.isComment)) { //5/2/15 by DW">
										<outline text="var childpath = path + getNameAtt (child); //5/20/15 by DW"/>
										<outline text="if (hasSubs (child)) {">
											<outline text="add (&quot;&lt;li&gt;&quot;); indentlevel++;"/>
											<outline text="var textlink = expandableTextLink (child.text, outlineBrowserData.serialNum);"/>
											<outline text="add (&quot;&lt;div &quot; + getOutlineTextClass (child) + &quot;&gt;&quot; + getIcon (outlineBrowserData.serialNum, flchildcollapsed) + img + textlink + getNodePermalink (child) + &quot;&lt;/div&gt;&quot;);"/>
											<outline text="addSubs (child, flchildcollapsed, childpath + &quot;/&quot;);"/>
											<outline text="add (&quot;&lt;/li&gt;&quot;); indentlevel--;"/>
											<outline text="}"/>
											</outline>
										<outline text="else {">
											<outline text="addChildlessSub (child, childpath);"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="add (&quot;&lt;/ul&gt;&quot;); indentlevel--; outlinelevel--;"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text="if (hasSubs (outline)) { //9/22/14 by DW">
						<outline text="" created="Thu, 02 Sep 2021 14:13:48 GMT"/>
						<outline text="add (&quot;&lt;div class=\&quot;divRenderedOutline\&quot;&gt;&quot;); indentlevel++;"/>
						<outline text="if (outline.text !== undefined) { //9/2/21 by DW" created="Thu, 02 Sep 2021 14:13:49 GMT">
							<outline text="var flTopLevelCollapsed = !flExpanded, theText = getHotText (outline);"/>
							<outline text="add (&quot;&lt;div class=\&quot;divRenderedOutline\&quot;&gt;&quot;); indentlevel++;" isComment="true"/>
							<outline text="add (&quot;&lt;div class=\&quot;divItemHeader divOutlineHead divOutlineHeadHasSubs\&quot;&gt;&quot; + getIcon (outlineBrowserData.serialNum, flTopLevelCollapsed) + theText + permalink + &quot;&lt;/div&gt;&quot;);"/>
							<outline text="}" created="Thu, 02 Sep 2021 14:13:58 GMT"/>
							</outline>
						<outline text=""/>
						<outline text="if (flMarkdown) {">
							<outline text="var markdowntext = getSubsMarkdownText (outline), style = &quot;&quot;;"/>
							<outline text="console.log (&quot;riverRenderOutline: markdowntext == &quot; + markdowntext);" isComment="true"/>
							<outline text="if (flTopLevelCollapsed) { //10/23/14 by DW">
								<outline text="style = &quot; style=\&quot;display: none;\&quot;&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text="var opendiv = &quot;&lt;div class=\&quot;divMarkdownSubs\&quot; id=\&quot;idOutlineLevel&quot; + outlineBrowserData.serialNum++ + &quot;\&quot; &quot; + style + &quot;&gt;&quot;;"/>
							<outline text="add (opendiv + markdown.makeHtml (markdowntext) + &quot;&lt;/div&gt;&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="add (&quot;&lt;div class=\&quot;divOutlineSubs\&quot;&gt;&quot;); indentlevel++;"/>
							<outline text="addSubs (outline, flTopLevelCollapsed, &quot;&quot;);"/>
							<outline text="add (&quot;&lt;/div&gt;&quot;); indentlevel--;"/>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="add (&quot;&lt;/div&gt;&quot;); indentlevel--;"/>
						<outline text=""/>
						<outline text="outlineBrowserData.serialNum++; //9/22/14 by DW"/>
						<outline text="}"/>
						</outline>
					<outline text="else {">
						<outline text="var theText = getNodeText (outline); //7/24/22 by DW" created="Sun, 24 Jul 2022 14:08:49 GMT"/>
						<outline text="add (&quot;&lt;div class=\&quot;divRenderedOutline\&quot;&gt;&quot;); indentlevel++;"/>
						<outline text="add (&quot;&lt;div class=\&quot;divItemDescription\&quot;&gt;&quot; + hotUpText (theText, outline.url) + permalink + &quot;&lt;/div&gt;&quot;);"/>
						<outline text="add (&quot;&lt;div class=\&quot;divItemDescription\&quot;&gt;&quot; + hotUpText (outline.text, outline.url) + permalink + &quot;&lt;/div&gt;&quot;);" isComment="true"/>
						<outline text="add (&quot;&lt;div class=\&quot;divItemHeader divOutlineHead\&quot;&gt;&quot; + hotUpText (outline.text, outline.url) + permalink + &quot;&lt;/div&gt;&quot;);" isComment="true"/>
						<outline text="add (&quot;&lt;/div&gt;&quot;); indentlevel--;"/>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text="if (outlineBrowserData.flProcessEmoji) { //7/3/17 PM by DW" isComment="true">
						<outline text="htmltext = emojiProcess (htmltext); "/>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text="return (htmltext);"/>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="styles.css" created="Thu, 02 Sep 2021 13:26:11 GMT">
				<outline text=".divRenderedOutline {">
					<outline text="font-family: &quot;Ubuntu&quot;;" isComment="true"/>
					<outline text="font-size: 18px;" isComment="true"/>
					<outline text="line-height: 150%;" isComment="true"/>
					<outline text="}"/>
					</outline>
				<outline text=".divOutlineSubs li {">
					<outline text="list-style-type: none;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divRenderedOutline .ulOutlineList {">
					<outline text="padding: 0;"/>
					<outline text="margin: 0;" isComment="true"/>
					<outline text="}"/>
					</outline>
				<outline text=".divRenderedOutline .divOutlineText {">
					<outline text="line-height: 135%;"/>
					<outline text="line-height: 140%;" isComment="true"/>
					<outline text="font-size: 0.85em;" isComment="true"/>
					<outline text="min-height: 0.85em;"/>
					<outline text="color: black;"/>
					<outline text="margin-bottom: 5px;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divRenderedOutline .divMarkdownSubs {">
					<outline text="line-height: 150%;"/>
					<outline text="font-size: 0.85em;"/>
					<outline text="color: black;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divOutlineHead {">
					<outline text="font-weight: bold;"/>
					<outline text="color: #1E68A6;" isComment="true"/>
					<outline text="color: black;" isComment="true"/>
					<outline text="font-size: 1.1em;" isComment="true"/>
					<outline text="margin-top: 13px;" isComment="true"/>
					<outline text="margin-bottom: 13px;" isComment="true"/>
					<outline text="}"/>
					</outline>
				<outline text=".divRenderedOutline .divOutlineHead .aOutlineTextLink {">
					<outline text="color: #1E68A6;"/>
					<outline text="font-size: 1.1em;" isComment="true"/>
					<outline text="}"/>
					</outline>
				<outline text=".divRenderedOutline .liHasSubs ul {">
					<outline text="}"/>
					</outline>
				<outline text=".divRenderedOutline .liNoSubs {">
					<outline text="}"/>
					</outline>
				<outline text=".divRenderedOutline .spOutlineIcon {">
					<outline text="margin-right: -11px;"/>
					<outline text="-moz-user-select: none;"/>
					<outline text="-webkit-user-select: none;"/>
					<outline text="-ms-user-select: none;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divRenderedOutline .aOutlineWedgeLink {">
					<outline text="color: black;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divRenderedOutline .aOutlineWedgeLink i {">
					<outline text="color: black;"/>
					<outline text="cursor: pointer;"/>
					<outline text="position: relative;"/>
					<outline text="width: .5em;"/>
					<outline text="left: -1em;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divRenderedOutline .aTwitterLink {" isComment="true">
					<outline text="font-size: 0.9em;"/>
					<outline text="color: black;" isComment="true"/>
					<outline text="cursor: pointer;"/>
					<outline text="position: relative;"/>
					<outline text="width: .5em;"/>
					<outline text="left: -1.4em;"/>
					<outline text="margin-right: -4px;"/>
					<outline text="opacity: .4;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divRenderedOutline .aImageIconLink {">
					<outline text="font-size: 0.9em;"/>
					<outline text="color: black;" isComment="true"/>
					<outline text="cursor: pointer;"/>
					<outline text="position: relative;"/>
					<outline text="width: .5em;"/>
					<outline text="left: -1.4em;"/>
					<outline text="margin-right: -7px;"/>
					<outline text="opacity: .4;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divRenderedOutline .divRenderedImage {">
					<outline text="margin-bottom: 2px;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divRenderedOutline .aOutlineTextLink {">
					<outline text="cursor: pointer;"/>
					<outline text="color: black;"/>
					<outline text="text-decoration: none;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divRenderedOutline .spPermalink {">
					<outline text="}"/>
					</outline>
				<outline text=".divRenderedOutline .spPermalink a {">
					<outline text="text-decoration: none;"/>
					<outline text="color: purple;"/>
					<outline text="font-size: 10px;"/>
					<outline text="font-weight: normal;"/>
					<outline text="vertical-align: top;"/>
					<outline text="margin-left: 3px;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divRenderedOutline code {">
					<outline text="display: inline;"/>
					<outline text="border: none;"/>
					<outline text="color: black;"/>
					<outline text="font-size: .85em;"/>
					<outline text="white-space: normal;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divRenderedOutline .divOutlineText a {">
					<outline text="color: black;" isComment="true"/>
					<outline text="}"/>
					</outline>
				<outline text=".spNodePermalink {">
					<outline text="margin-left: 8px;"/>
					<outline text="}"/>
					</outline>
				<outline text=".spNodePermalink a {">
					<outline text="color: purple;"/>
					<outline text="}"/>
					</outline>
				<outline text=".ulNumberedSubs li {">
					<outline text="list-style-type: decimal;"/>
					<outline text="margin-left: 20px;"/>
					<outline text="}"/>
					</outline>
				<outline text=".ulBulletedSubs li {">
					<outline text="list-style-type: square;"/>
					<outline text="margin-left: 20px;"/>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text=".ulCodeSubs {">
					<outline text="font-family: &quot;Lucida Console&quot;, Monaco, &quot;Courier New&quot;, &quot;Courier&quot;, monospace !important;"/>
					<outline text="font-size: 18px;"/>
					<outline text="}"/>
					</outline>
				<outline text=".ulCodeSubs .divOutlineText {">
					<outline text="line-height: 130%;"/>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text=".divOutlineCursor {">
					<outline text="background-color: black;"/>
					<outline text="color: white;" isComment="true"/>
					<outline text="margin-left: -2px;"/>
					<outline text="padding-left: 2px;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divRenderedOutline .divOutlineCursor a {">
					<outline text="color: white;"/>
					<outline text="}"/>
					</outline>
				<outline text="" created="Sun, 24 Jul 2022 14:18:20 GMT"/>
				</outline>
			<outline text="readme.md">
				<outline text="# outlineBrowser2">
					<outline text="JavaScript code to display JSON outlines."/>
					</outline>
				<outline text="### Status of the project" created="Fri, 10 Sep 2021 13:13:46 GMT">
					<outline text="I forked this from the &lt;a href=&quot;https://github.com/scripting/outlineBrowser&quot;&gt;previous outlineBrowser&lt;/a&gt; written years ago. " created="Fri, 10 Sep 2021 13:13:59 GMT"/>
					<outline text="I want to be able to fix stuff without worrying about backward compatibility." created="Fri, 10 Sep 2021 13:14:11 GMT"/>
					<outline text="Older code uses the first version of the outlineBrowser code, preserved in &lt;a href=&quot;https://github.com/scripting/outlineBrowser&quot;&gt;this repo&lt;/a&gt;." created="Fri, 10 Sep 2021 13:14:23 GMT"/>
					</outline>
				<outline text="### Updates" created="Mon, 30 May 2022 15:03:32 GMT">
					<outline text="See the &lt;a href=&quot;worknotes.md&quot;&gt;worknotes&lt;/a&gt; page." created="Sun, 24 Jul 2022 13:59:08 GMT"/>
					</outline>
				</outline>
			</outline>
		<outline text="build script" created="Fri, 10 Sep 2021 13:14:58 GMT">
			<outline text="nodeEditorSuite.utilities.buildOutlineBrowser2 ()"/>
			</outline>
		</body>
	</opml>
